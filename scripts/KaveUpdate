#!/usr/bin/env python
##############################################################################
#
# Copyright 2016 KPMG Advisory N.V. (unless otherwise stated)
#
# Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##############################################################################
"""
The KaveUpdate

This python script downloads a new install script from the repository, and executes it for you.
This should make it easier to perform updates of KAVE software into the future.

There are installation scripts looking like:
http://repos:kaverepos@repos.kave.io/noarch/KaveToolbox/3.3-Beta/kavetoolbox-installer-3.3-Beta.sh
for each installation.

usage:
    KaveUpdate [<version> --list ...]

If no version is given, the latest version will be attempted.
If --list is given the available versions will be printed and the program will exit

All other arguements that start with --/- are passed through to the downloaded script.
Only one arguement without a --/- is allowed, and that is the version number
i.e. --clean-after is a common arguement when upgrading.
"""

import os
import sys
import subprocess as subp
import tempfile

if "--help" in sys.argv or "-h" in sys.argv:
    print __doc__

#
# Check all arguements
#
passargs = [a for a in sys.argv[1:] if a.startswith('-')  and a not in ["--list"]]
vargs = [a for a in sys.argv[1:] if not a.startswith('-') and a not in ["--list"]]

if len(vargs) > 1:
    print __doc__
    raise AttributeError("You have sent too many arguements without '-' "+vargs.__str__() )

installfrom = os.path.realpath(os.sep.join(__file__.split(os.sep)[:-2]))
if installfrom == "":
    installfrom = ".."
if installfrom.endswith("scripts"):
    installfrom = installfrom[:-len("scripts")]
conflocation = installfrom + os.sep + "config" + os.sep
conflocation = os.path.realpath(conflocation)
sys.path.append(conflocation)
topdir = os.getcwd()

import kaveinstall as li


def linkscraper(url):
    """
    Download a webpage and find all links in the page
    """
    links = []
    import urllib
    import lxml.html
    connection = urllib.urlopen(url)

    dom =  lxml.html.fromstring(connection.read())

    for link in dom.xpath('//a/@href'): # select the url in href for all a tags(links)
        links.append(link)
    return links

def mirrorsearch():
    """
    Search through all the options in the mirrors file for
    installable KaveToolbox versions, accepts local directories
    or websites (unsure about ftp)
    """
    results = []
    alist = li.__mirror_list__[:]
    alist.append(li.__repo_url__)
    for mirror in alist:
        # it's a directory
        if mirror.startswith("/"):
            mirror = os.path.realpath(mirror)
            if os.path.isdir(mirror):
                import glob
                dirs = glob.glob(mirror+os.sep+"noarch"+os.sep+"KaveToolbox"+os.sep+"*")
                results = results + [d.split(os.sep)[-1] for d in dirs if os.path.isdir(os.path.realpath(d))]
                continue
        elif mirror.startswith("http") or mirror.startswith("ftp:"):
            links = linkscraper(mirror+"/noarch/KaveToolbox/")
            results = results + [l[:-1] for l in links if l[0].isdigit() and l[-1]=="/"]
    return sorted(list(set(results)))


__allvs__ = None
def allversions():
    """
    Return a sorted list of all available KTB versions
    dynamic using the list of mirrors/local cache
    """
    global __allvs__
    if not __allvs__ or not len(__allvs__):
        __allvs__ = mirrorsearch()
    return __allvs__


def version(vargs):
    if len(vargs):
        return vargs[0]
    # don' pick a 'Pre' version ...
    return [v for v in allversions() if not v.endswith('-Pre')][-1]

# Test that the repo is reachable

repotest = li.fromKPMGrepo("", "noarch")

if repotest is None:
    raise IOError(
        "Could not connect to the KPMG repo page, please set up a local mirror/nearside cache, or check your proxy "
        "settings (did you ensure your su inherits your proxy settings?)")


#
# Install lxml if not there!!
#
try:
    import lxml
except ImportError:
    preinstall = {"Centos6": ["yum -y install epel-release", 'yum clean all',
                              "yum -y install python-devel python-pip", "pip install lxml"],
                  "Centos7": ["yum -y install epel-release", 'yum clean all',
                              "yum -y install python-devel python-pip", "pip install lxml"],
                  "Ubuntu14": ["apt-get install -y python-dev python-pip", "pip install lxml"]}

    for cmd in preinstall[li.linuxVersion]:
        stat, out, err = li.mycmd(cmd)
        if stat:
            raise SystemError(
                "Could not run preinstall: " + cmd + " : are you running as sudo? Or maybe you have no access to a "
                                                     "package repo? \n" + out + "\n" + err)

if "--list" in sys.argv[1:]:
    print allversions().__str__()
    sys.exit(0)

li.__version__ = version(vargs)

# test that this version exists
toget = li.fromKPMGrepo("kavetoolbox-installer", version=li.__version__, suffix=".sh", arch="noarch")

if toget is None:
    raise IOError("Could not find/download installer for version " + li.__version__ + " all available versions are: "
                  + allversions().__str__()
                  )

tempdir = tempfile.mkdtemp()
os.chdir(tempdir)
# Download it
li.clean_on_fail_loud(li.copymethods(toget, "kavetoolbox-installer-"+li.__version__+".sh"), tempdir)
# Run it
li.clean_on_fail_loud("bash kavetoolbox-installer-"+li.__version__+".sh "+" ".join(passargs), tempdir)

#final cleanup
os.chdir(topdir)
if os.path.exists(tempdir) and len(tempdir)>4:
    os.system("rm -rf "+tempdir)
